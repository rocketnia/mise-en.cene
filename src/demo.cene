\= demo.cene (part of Mise-en.cene)
\= Copyright 2017 Ross Angle. Released under the MIT License.


\= ===== DOM operations ==============================================
\=
\= TODO: Move these to Cene's js.cene.

(defn dom-set-attribute el k maybe-v
  (case maybe-v
    
    nil
    (js-builder/fn client
    /call-js-effects-2 client el string-to-javascript-utf-16.k
      js.\;qq;yp[return function ( client, el, k ) {
          el.setAttribute( k, null );
          return client.done( client.wrap( null ) );
      };])
    
    yep v
    (js-builder/fn client
    /call-js-effects-3 client el
      string-to-javascript-utf-16.k
      string-to-javascript-utf-16.v
      js.\;qq;yp[return function ( client, el, k, v ) {
          el.setAttribute( k, v );
          return client.done( client.wrap( null ) );
      };])
    
    err.\;qq[Expected a maybe-v that was a yep or a nil]))

(defn domt-attr k maybe-v
  (fn el
    (dom-set-attribute el k maybe-v)))


\= ===== Styleable documents =========================================

\= The attributes are a list of arbitrary values, and the contents are
\= an interpolated string of doc-node values.
\=
\= TODO: See if we can put the attributes into an orderless collection
\= instead of a list. We might want it to be encapsulated to some
\= extent as well, so that multiple processing passes can manipulate
\= the same document without leaking details to each other.
\=
(def-struct doc-node attributes contents)


\= ===== Using a styleable document to generate HTML =================

(def-struct doc-attr-html-tag name)
(def-struct doc-attr-html-attr k v)

(defn domt-from-doc-node doc-node
  (cast doc-node doc-node attributes contents
    err.\;qq[Expected a doc-node that was a doc-node]
  /let html-tags
    (keep attributes /fn attribute /isa doc-attr-html-tag attribute)
  /let html-attrs
    (keep attributes /fn attribute /isa doc-attr-html-attr attribute)
  /case
    (any html-tags /fn html-tag
      (cast html-tag doc-attr-html-tag name
        err.\;qq[Internal error]
      /any html-tags /fn html-tag-2
        (cast html-tag-2 doc-attr-html-tag name-2
          err.\;qq[Internal error]
        /not/isa nil /string-metacompare name name-2)))
    yep -
    err.\;qq[Contradictory doc-attr-html-tag attributes found]
  /case
    (any html-attrs /fn html-attr
      (cast html-attr doc-attr-html-attr k v
        err.\;qq[Internal error]
      /any html-attrs /fn html-attr-2
        (cast html-attr-2 doc-attr-html-attr k2 v2
          err.\;qq[Internal error]
        /and (isa nil /string-metacompare k k2)
        /not/isa nil /string-metacompare v v2)))
    yep -
    err.\;qq[Contradictory doc-attr-html-attr attributes found]
  /let domt
    (pass-to contents /fix/fn domt-from-contents contents
      (case contents
        
        istring-cons prefix interpolation rest
        (fn el
          (dom-transform done-js-builder.el /list
            (domt-child/dom-text prefix)
            domt-from-doc-node.interpolation
            (c domt-from-contents rest)))
        
        istring-nil suffix
        (domt-child/dom-text suffix)
        
        err.\;qq[Expected a doc-node body that was an istring]))
  /let domt
    (fn el
      (dom-transform done-js-builder.el /append
        (map html-attrs /fn html-attr
          (cast html-attr doc-attr-html-attr k v
            err.\;qq[Internal error]
          /domt-attr k /yep v))
      /list domt))
  /case html-tags cons html-tag -
    (cast html-tag doc-attr-html-tag name
      err.\;qq[Internal error]
    /domt-child/dom-transform dom-tag.name /list domt)
    domt))


\= ===== Convenient markup syntax for styleable documents ============

\= TODO: Use something like this to split the lines for `convo-lines`.
\;rm(defn chops-split-and-trim-later istring then
  (istring-split-later istring (regex-from-string str.\;qq[|])
  /fn istrings
  /map-later istrings (chops-trim-later) then))

(defn run-chopsrun-convo chopsrun
  (cast chopsrun free-chopsrun chopsrun
    err.\;qq[Expected a chopsrun that was a free-chopsrun]
  /c chopsrun /chopsrun-ops
    
    \= from-string
    (fn string
      (doc-node (list) /istring-nil string))
    
    \= from-interpolation
    (fn interpolation interpolation)
    
    \= join
    (fn a b
      (doc-node (list)
      /istring-cons str.\;qq[] a
      /istring-cons str.\;qq[] b
      /istring-nil str.\;qq[]))))

(defn convo-b body
  (doc-node (list /doc-attr-html-tag str.b)
  /istring-cons str.\;qq[] body
  /istring-nil str.\;qq[]))

(def-chops-macro b home-scope caller-scope my-stx-details chops then
  (basic-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac then
  /compile-convo-chops-to-expr-later s mac caller-scope chops
  /fn chops
  /get-mode/fn mode /c then /let mac (c mac mode)
  /c mac str.chopsrun-from-nonfree /list
  /c mac str.convo-b /list chops))

(defn compile-convo-chops-to-expr-later s mac scope chops then
  (compile-chops-to-expr-later s mac scope chops /fn chops
  /get-mode/fn mode /c then /let mac (c mac mode)
  /c mac str.run-chopsrun-convo /list chops))

(def-macro convo-span
  home-scope caller-scope my-stx-details args then
  
  (cast args cons istring args
    err.\;qq[Called convo-span with fewer than one argument]
  /cast args nil
    err.\;qq[Called convo-span with more than one argument]
  /parse-located-chops-force-later istring /fn chops
  /basic-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac then
  /compile-convo-chops-to-expr-later s mac caller-scope chops then))


\= ===== Build artifact: The demo's JavaScript behavior ==============

(defn js-client-main client
  (then-js-effects
    (run-give-unwrapped-js-effects client
      js.\;qq;yp[return function ( client ) {
          var document = client.getTopLevelVar( "document" );
          return client.done( client.wrap( document.body ) );
      };])
    /fn body
  /run-js-builder client
  /dom-transform done-js-builder.body /list
  /domt-from-doc-node/doc-node (list /doc-attr-html-tag str.ul)
  /istring-cons str.\;qq[]
    (doc-node (list /doc-attr-html-tag str.li)
    /istring-cons str.\;qq[]
      convo-span.\;qq[Hello, [b bold text].]
    /istring-nil str.\;qq[])
  /istring-cons str.\;qq[]
    (doc-node (list /doc-attr-html-tag str.li)
    /istring-nil str.\;qq[Hello, world.])
  /istring-nil str.\;qq[]))

(def-macro build-client
  home-scope caller-scope my-stx-details args then
  
  (basic-nil-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac
  /get-mode/fn mode
  /join-effects
    (make-js-program mode home-scope
      (output-path-get
        (output-path-get cli-output-directory.mode str.\;qq[static])
        str.\;qq[client.js])
      str.js-client-main
    /list str.document)
  /no-effects/nil))

(build-client)


\= ===== Build artifact: Raw assets the demo uses ====================

(def-macro build-raw-assets
  home-scope caller-scope my-stx-details args then
  
  (basic-nil-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac
  /get-mode/fn mode
  /join-effects
    (copy-paths mode
      (input-path-get
        (input-path-get cli-input-directory.mode str.src)
        str.raw)
      cli-output-directory.mode)
  /no-effects/nil))

(build-raw-assets)


\= ===== Notes detailing the desired screenplay syntax ===============

\= This dialogue is derived from Rick and Rollo volume 18, a public
\= domain comic obtained from these URLs:
\=
\= https://digitalcomicmuseum.com/preview/index.php?did=23823&page=15
\= to
\= https://digitalcomicmuseum.com/preview/index.php?did=23823&page=19

\= TODO: Uncomment this once we've implemented the infrastructure to
\= make it work.
\;rm(defn conversation-main -

/let rollo (tag/dexable (dex-string/nil) str.\;qq[rollo])
/let greg (tag/dexable (dex-string/nil) str.\;qq[greg])
/let rock (tag/dexable (dex-string/nil) str.\;qq[rock])
/let sfx (tag/dexable (dex-string/nil) str.\;qq[sfx])
/let title (tag/dexable (dex-string/nil) str.\;qq[title])

/let sad (tag/dexable (dex-string/nil) str.\;qq[sad])
/let happy (tag/dexable (dex-string/nil) str.\;qq[happy])
/let distressed (tag/dexable (dex-string/nil) str.\;qq[distressed])
/let shocked (tag/dexable (dex-string/nil) str.\;qq[shocked])

/convo-lines \;qq;yp/


rollo | Mother may disapprove if she finds you wearing all those gems,
  Rock!
rock | Aw, she won't mind!
rock distressed | This is some load...
rock distressed | All these imitation jewels are...
rollo | Those jewels are...
greg | Heh! Heh! Just a couple of brats!
greg | You know what this is?
rock shocked | Any stupe knows that's a gun!
rock | You simply shouldn't point guns at people!
sfx | WAK
greg sad | Ouch!
greg sad | It's only a play gun! Please let me have it back!
rock distressed | I hate to see a crook blubber! Here's your gun!
greg | As a matter of fact, this is a real gun! Hee!
greg | That's mighty nice looking ice you're wearing! Let's have it!
rock | Why sure... if you insist! You've got the gun!
greg | You have any more?
rock | Wait right here!
greg | No, I'll come along!
rollo | Mother won't like this!
greg | Hand it [b all] over!
rock | That's what I'm doing!
greg distressed | H-hey that's about enough!
rock | Oh, [b do] have some more!
rock | You [b want] it all, you'll [b get] it all!
sfx | CRASH
rock | You're [b loaded]! Tee hee!
rollo happy | I'll call the police!
rock shocked | Tell them to bring an ambulance!
police shocked | It's [b Greedy Greg], the jewel thief!
rock | So I kept piling this imitation jewelry on him till he
  collaped!
police happy | Good work, girl! You'll be rewarded!
rollo | Mother will be upset!
rock distressed | She'd be more upset if they took all that imitation
  jewelry!
rollo | That's what I'm trying to tell you...
rock shocked | What?
rollo | That was [b real] jewelry! Worth [b millions]!
rollo shocked | [b Real] jewelry? Gasp!
sfx | PLOP!
title | The [b End]

)
