\= mise-en.cene
\= Copyright 2017 Ross Angle. Released under the MIT License.


\= ===== Strings =====================================================
\=
\= TODO: Move these to Cene's string.cene.

(defn istring-is-empty istring
  (cast istring istring-nil string (nope/nil)
  /isa nil /string-metacompare str.\;qq[] string))


\= ===== DOM operations ==============================================
\=
\= TODO: Move these to Cene's js.cene.

(defn dom-set-attribute el k maybe-v
  (case maybe-v
    
    nil
    (js-builder/fn client
    /call-js-effects-2 client el string-to-javascript-utf-16.k
      js.\;qq;yp[return function ( client, el, k ) {
          el.setAttribute( k, null );
          return client.done( client.wrap( null ) );
      };])
    
    yep v
    (js-builder/fn client
    /call-js-effects-3 client el
      string-to-javascript-utf-16.k
      string-to-javascript-utf-16.v
      js.\;qq;yp[return function ( client, el, k, v ) {
          el.setAttribute( k, v );
          return client.done( client.wrap( null ) );
      };])
    
    err.\;qq[Expected a maybe-v that was a yep or a nil]))

(defn domt-attr k maybe-v
  (fn el
    (dom-set-attribute el k maybe-v)))


\= ===== Styleable documents =========================================

\= The attributes are a list of arbitrary values, and the contents are
\= an interpolated string of doc-node values.
\=
\= TODO: See if we can put the attributes into an orderless collection
\= instead of a list. We might want it to be encapsulated to some
\= extent as well, so that multiple processing passes can manipulate
\= the same document without leaking details to each other.
\=
(def-struct doc-node attributes contents)


\= ===== Using a styleable document to generate HTML =================

(def-struct doc-attr-html-tag name)
(def-struct doc-attr-html-attr k v)

(defn domt-from-doc-node doc-node
  (cast doc-node doc-node attributes contents
    err.\;qq[Expected a doc-node that was a doc-node]
  /let html-tags
    (keep attributes /fn attribute /isa doc-attr-html-tag attribute)
  /let html-attrs
    (keep attributes /fn attribute /isa doc-attr-html-attr attribute)
  /case
    (any html-tags /fn html-tag
      (cast html-tag doc-attr-html-tag name
        err.\;qq[Internal error]
      /any html-tags /fn html-tag-2
        (cast html-tag-2 doc-attr-html-tag name-2
          err.\;qq[Internal error]
        /not/isa nil /string-metacompare name name-2)))
    yep -
    err.\;qq[Contradictory doc-attr-html-tag attributes found]
  /case
    (any html-attrs /fn html-attr
      (cast html-attr doc-attr-html-attr k v
        err.\;qq[Internal error]
      /any html-attrs /fn html-attr-2
        (cast html-attr-2 doc-attr-html-attr k2 v2
          err.\;qq[Internal error]
        /and (isa nil /string-metacompare k k2)
        /not/isa nil /string-metacompare v v2)))
    yep -
    err.\;qq[Contradictory doc-attr-html-attr attributes found]
  /let domt
    (pass-to contents /fix/fn domt-from-contents contents
      (case contents
        
        istring-cons prefix interpolation rest
        (fn el
          (dom-transform done-js-builder.el /list
            (domt-child/dom-text prefix)
            domt-from-doc-node.interpolation
            (c domt-from-contents rest)))
        
        istring-nil suffix
        (domt-child/dom-text suffix)
        
        err.\;qq[Expected a doc-node body that was an istring]))
  /let domt
    (fn el
      (dom-transform done-js-builder.el /append
        (map html-attrs /fn html-attr
          (cast html-attr doc-attr-html-attr k v
            err.\;qq[Internal error]
          /domt-attr k /yep v))
      /list domt))
  /case html-tags cons html-tag -
    (cast html-tag doc-attr-html-tag name
      err.\;qq[Internal error]
    /domt-child/dom-transform dom-tag.name /list domt)
    domt))


\= ===== Convenient markup syntax for styleable documents ============

(defn run-chopsrun-convo chopsrun
  (cast chopsrun free-chopsrun chopsrun
    err.\;qq[Expected a chopsrun that was a free-chopsrun]
  /c chopsrun /chopsrun-ops
    
    \= from-string
    (fn string
      (doc-node (list) /istring-nil string))
    
    \= from-interpolation
    (fn interpolation interpolation)
    
    \= join
    (fn a b
      (doc-node (list)
      /istring-cons str.\;qq[] a
      /istring-cons str.\;qq[] b
      /istring-nil str.\;qq[]))))

(defn convo-b body
  (doc-node (list /doc-attr-html-tag str.b)
  /istring-cons str.\;qq[] body
  /istring-nil str.\;qq[]))

(def-chops-macro b home-scope caller-scope my-stx-details chops then
  (basic-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac then
  /compile-convo-chops-to-expr-later s mac caller-scope chops
  /fn chops
  /get-mode/fn mode /c then /let mac (c mac mode)
  /c mac str.chopsrun-from-nonfree /list
  /c mac str.convo-b /list chops))

(defn compile-convo-chops-to-expr-later s mac scope chops then
  (compile-chops-to-expr-later s mac scope chops /fn chops
  /get-mode/fn mode /c then /let mac (c mac mode)
  /c mac str.run-chopsrun-convo /list chops))

(def-macro convo-span home-scope caller-scope my-stx-details args then
  (cast args cons istring args
    err.\;qq[Called convo-span with fewer than one argument]
  /cast args nil
    err.\;qq[Called convo-span with more than one argument]
  /parse-located-chops-force-later istring /fn chops
  /basic-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac then
  /compile-convo-chops-to-expr-later s mac caller-scope chops then))

(def-macro convo-lines
  home-scope caller-scope my-stx-details args then
  
  (cast args cons istring args
    err.\;qq[Called convo-lines with fewer than one argument]
  /cast args nil
    err.\;qq[Called convo-lines with more than one argument]
  \= TODO: Stop using `from-located` and `to-located` here.
  /parse-located-chops-force-later istring /fn chops
  /istring-split-later from-located.chops
    (regex-from-string str.\;qq[\n])
  /fn lines
  /map-later lines (chops-trim-later) /fn lines
  /let lines (keep lines /fn line /not/istring-is-empty line)
  /basic-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac then
  /scope-spread-later caller-scope lines
    (fn scope line then
      (istring-split-later line (regex-from-string str.\;qq[|])
      /fn parts
      /cast parts cons tags rest
        err.\;qq[Internal error]
      /cast rest cons body rest
        err.\;qq[Encountered a nonempty convo-lines line without a |]
      /cast rest nil
        err.\;qq[Encountered a convo-lines line with more than one |]
      
      \= TODO: Support tags. Right now, we just ignore all the text
      \= that would specify the tags. This code at least would verify
      \= that the text was empty before ignoring it.
      \=
\=      /chops-trim-later tags /fn tags
\=      /cast istring-is-empty.tags yep -
\=        err.\;qq[
\=          Encountered a convo-lines line with tags, which are not
\=          supported yet]
      
      /chops-trim-later body /fn body
      /compile-convo-chops-to-expr-later s mac scope to-located.body
        then))
  /fn lines
  /get-mode/fn mode /c then /let mac (c mac mode)
  /c mac str.list lines))
